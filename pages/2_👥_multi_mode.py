import os

import streamlit as st

from chatbot import AssistantChatbot, PhilosopherChatbot
from utils.api_manager import APIManager
from utils.language_manager import LanguageManager
from utils.logging import configure_logger

logger = configure_logger(__file__)

st.set_page_config(page_title="chat-o-sophy - mutli mode", page_icon="ðŸ’­")


PHILOSOPHERS = [
    os.path.splitext(filename)[0].replace("_", " ").title()
    for filename in os.listdir("philosophers")
]


def main():
    logger.info("Running multi mode")

    st.session_state.setdefault("language_manager", LanguageManager())
    st.session_state.setdefault("api_manager", APIManager())

    with st.sidebar:
        st.session_state.language_manager.main()
        st.divider()
        st.session_state.api_manager.main()

    with st.container():
        st.title("Multi mode", anchor=False)
        st.caption("Ask a question to several philosophers at once!")

        current_choices = st.multiselect(
            label="Philosophers:",
            placeholder="Choose several philosophers",
            options=PHILOSOPHERS,
            max_selections=5,
            default=None,
            disabled=not os.getenv("OPENAI_API_KEY"),
        )

    if not os.getenv("OPENAI_API_KEY"):
        st.error(
            "Please configure your OpenAI API key in left sidebar to unlock selection",
            icon="ðŸ”’",
        )

    if prompt := st.chat_input(
        placeholder="What is your question?",
        disabled=not (current_choices and os.getenv("OPENAI_API_KEY")),
    ):
        logger.info("User prompt submitted")
        st.chat_message("human").write(prompt)
        history = [{"role": "human", "content": prompt}]
        for philosopher in current_choices:
            st.header(philosopher, divider="gray", anchor=False)
            chatbot = PhilosopherChatbot(philosopher)
            logger.info(f"Generating {philosopher}'s response")
            with st.chat_message("ai", avatar=chatbot.avatar):
                with st.spinner(f"{philosopher} is writing..."):
                    answer = chatbot.chat(
                        prompt=prompt, language=st.session_state.language
                    )
                    history.append({"role": philosopher, "content": answer})

        st.header(
            "Synthesis",
            anchor=False,
            help="Generated by an AI assistant, based on the above answers.",
            divider="gray",
        )
        logger.info("Instantiating AI assistant")
        assistant = AssistantChatbot(history)
        logger.info("Generating summary")
        assistant.summarize_responses(language=st.session_state.language)
        with st.spinner("Generating summary table..."):
            logger.info("Generating summary table")
            assistant.summary_table(language=st.session_state.language)


if __name__ == "__main__":
    main()
